import usb.core
import usb.util
import time
import eel
import webbrowser
import os

VENDOR_ID = 0x04D9
PRODUCT_ID = 0xA1DF

bmRequestType = 0x21
bRequest = 0x09  # SET_REPORT request
wValue = 0x0300
wIndex = 3
wLength = 8

INIT_PACKETS = [
    [0x15, 0x00, 0x03, 0x01, 0x03, 0x07, 0x00, 0xdc],
    [0x16, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xea],
    [0x16, 0x00, 0x01, 0x00, 0xff, 0x00, 0x00, 0xe9],
    [0x16, 0x00, 0x02, 0xff, 0xff, 0x00, 0x00, 0xe9],
    [0x16, 0x00, 0x03, 0x00, 0x00, 0xff, 0x00, 0xe7],
    [0x16, 0x00, 0x04, 0x00, 0xff, 0xff, 0x00, 0xe7],
    [0x16, 0x00, 0x05, 0x00, 0xff, 0xff, 0x00, 0xe6],
    [0x16, 0x00, 0x06, 0xff, 0xff, 0xff, 0x00, 0xe6],
]

def get_preset_packet():
    speed_val = 0x01
    color_val = 0x08
    brightness_val = 0x32
    direction_val = 0x01
    ###################
    ### CHOOSE MODE ###
    ###################
    print("Choose the mode:")
    print("01: Static")
    print("02: Breath")
    print("03: Wave")
    print("04: Reactive")
    print("05: Sidewinder")
    print("06: Ripple")
    print("07: Reactive (duplicate smh)")
    print("08: Spectrum")
    print("09: Secret (Rainbow Sidewinder)")
    print("10: Rain")
    print("11: Whirl")
    print("12: Spotlight")
    print("13: Radar")
    inp = "abc"
    while (not inp.isdigit()) or int(inp) < 1 or int(inp) > 13:
        inp = input("Input number: ")
    mode_val = int(inp)
    print()
    ####################
    ### CHOOSE COLOR ###
    ####################
    if mode_val != 8:
        print("Choose the color:")
        print("01: Red")
        print("02: Green")
        print("03: Yellow")
        print("04: Dark Blue")
        print("05: Light Blue")
        print("06: Pink")
        print("07: White")
        if mode_val != 1:
            print("08: RAINBOW")
        inp = "abc"
        while (not inp.isdigit()) or int(inp) < 1 or int(inp) > 8 or (mode_val == 1 and int(inp) > 7):
            inp = input("Input number: ")
        color_val = int(inp)
        print()

    #########################
    ### CHOOSE BRIGHTNESS ###
    #########################

    print("Choose the brightness (0 - 100):")
    print("00: Dimmest")
    print("    ...    ")
    print("100: Brightest")
    inp = "abc"
    while (not inp.isdigit()) or int(inp) < 0 or int(inp) > 100:
        inp = input("Input number: ")
    brightness_val = int(brightness_val * (int(inp) / 100))
    print()

    ####################
    ### CHOOSE SPEED ###
    ####################

    if mode_val != 1:
        print("Choose the speed (1 - 10):")
        print("01: Fastest")
        print("    ...    ")
        print("10: Slowest")
        inp = "abc"
        while (not inp.isdigit()) or int(inp) < 1 or int(inp) > 10:
            inp = input("Input number: ")
        speed_val = int(inp)
        print()

    #########################
    ### CHOOSE DIRECTION  ###
    #########################
    if mode_val == 13:
        print("Choose the direction:")
        print("01: right")
        print("02: left")
        print("03: top")
        print("04: bottom")
        inp = "abc"
        while (not inp.isdigit()) or int(inp) < 1 or int(inp) > 4:
            inp = input("Input number: ")
        direction_val = int(inp)
        print()
    packet = [0x08, 0x02, mode_val, speed_val, brightness_val, color_val, direction_val, 0x00]
    packet[7] = calculate_checksum(packet)
    return packet


def send_custom_packets(dev,datas):
    endpoint = 0x06
    packet1 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # L_CTRL
        0x00, 0x00, 0x00, 0x00,  # L_SHIFT
        0x00, 0x00, 0x00, 0x00,  # CAPS
        0x00, 0x00, 0x00, 0x00,  # TAB
        0x00, 0x00, 0x00, 0x00,  # ^/°
        0x00, 0x00, 0x00, 0x00,  # ESC
        0x00, 0x00, 0x00, 0x00,  # SUPER/WIN
        0x00, 0x00, 0x00, 0x00,  # Y
        0x00, 0x00, 0x00, 0x00,  # A
        0x00, 0x00, 0x00, 0x00,  # Q
        0x00, 0x00, 0x00, 0x00,  # 1
        0x00, 0x00, 0x00, 0x00,  # < >
        0x00, 0x00, 0x00, 0x00,  # L_ALT
        0x00, 0x00, 0x00, 0x00,  # X
        0x00, 0x00, 0x00, 0x00,  # S
        0x00, 0x00, 0x00, 0x00   # W
    ])
    packet2 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # 2
        0x00, 0x00, 0x00, 0x00,  # F1
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # C
        0x00, 0x00, 0x00, 0x00,  # D
        0x00, 0x00, 0x00, 0x00,  # E
        0x00, 0x00, 0x00, 0x00,  # 3
        0x00, 0x00, 0x00, 0x00,  # F2
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # V
        0x00, 0x00, 0x00, 0x00,  # F
        0x00, 0x00, 0x00, 0x00,  # R
        0x00, 0x00, 0x00, 0x00,  # 4
        0x00, 0x00, 0x00, 0x00,  # F3
        0x00, 0x00, 0x00, 0x00,  # SPACE
        0x00, 0x00, 0x00, 0x00  # B
    ])
    packet3 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # G
        0x00, 0x00, 0x00, 0x00,  # T
        0x00, 0x00, 0x00, 0x00,  # 5
        0x00, 0x00, 0x00, 0x00,  # F4
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # N
        0x00, 0x00, 0x00, 0x00,  # H
        0x00, 0x00, 0x00, 0x00,  # Z
        0x00, 0x00, 0x00, 0x00,  # 6
        0x00, 0x00, 0x00, 0x00,  # F5
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # M
        0x00, 0x00, 0x00, 0x00,  # J
        0x00, 0x00, 0x00, 0x00,  # U
        0x00, 0x00, 0x00, 0x00,  # 7
        0x00, 0x00, 0x00, 0x00  # F6
    ])
    packet4 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # ,
        0x00, 0x00, 0x00, 0x00,  # K
        0x00, 0x00, 0x00, 0x00,  # I
        0x00, 0x00, 0x00, 0x00,  # 8
        0x00, 0x00, 0x00, 0x00,  # F7
        0x00, 0x00, 0x00, 0x00,  # ALT GR
        0x00, 0x00, 0x00, 0x00,  # .
        0x00, 0x00, 0x00, 0x00,  # L
        0x00, 0x00, 0x00, 0x00,  # O
        0x00, 0x00, 0x00, 0x00,  # 9
        0x00, 0x00, 0x00, 0x00,  # F8
        0x00, 0x00, 0x00, 0x00,  # FN
        0x00, 0x00, 0x00, 0x00,  # -
        0x00, 0x00, 0x00, 0x00,  # Ö
        0x00, 0x00, 0x00, 0x00  # P
    ])
    packet5 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # 0
        0x00, 0x00, 0x00, 0x00,  # F9
        0x00, 0x00, 0x00, 0x00,  # MENU
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # Ä
        0x00, 0x00, 0x00, 0x00,  # Ü
        0x00, 0x00, 0x00, 0x00,  # ß
        0x00, 0x00, 0x00, 0x00,  # F10
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # R_SHIFT
        0x00, 0x00, 0x00, 0x00,  # #
        0x00, 0x00, 0x00, 0x00,  # +
        0x00, 0x00, 0x00, 0x00,  # ´ (the one next to ß and backspace)
        0x00, 0x00, 0x00, 0x00,  # F11
        0x00, 0x00, 0x00, 0x00,  # R_CTRL
        0x00, 0x00, 0x00, 0x00  # ???
    ])
    packet6 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # ENTER
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # BACKSPACE
        0x00, 0x00, 0x00, 0x00,  # F12
        0x00, 0x00, 0x00, 0x00,  # ARROW LEFT
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # DELETE / ENTF
        0x00, 0x00, 0x00, 0x00,  # INSERT / EINFG
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # ARROW DOWN
        0x00, 0x00, 0x00, 0x00,  # ARROW UP
        0x00, 0x00, 0x00, 0x00,  # ??? (maybe print?)
        0x00, 0x00, 0x00, 0x00,  # END
        0x00, 0x00, 0x00, 0x00,  # POS 1
        0x00, 0x00, 0x00, 0x00  # SCROLL / ROLLEN
    ])
    packet7 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # ARROW RIGHT
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # PAGE DOWN / BILD RUNTER
        0x00, 0x00, 0x00, 0x00,  # PAGE UP / BILD HOCH
        0x00, 0x00, 0x00, 0x00,  # PAUSE
        0x00, 0x00, 0x00, 0x00,  # NUM0
        0x00, 0x00, 0x00, 0x00,  # NUM1
        0x00, 0x00, 0x00, 0x00,  # NUM4
        0x00, 0x00, 0x00, 0x00,  # NUM7
        0x00, 0x00, 0x00, 0x00,  # NUM LOCK
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # NUM2
        0x00, 0x00, 0x00, 0x00,  # NUM5
        0x00, 0x00, 0x00, 0x00  # NUM8
    ])
    packet8 = bytearray([
        0x00, 0x00, 0x00, 0x00,  # NUM DIVIDE (/)
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # NUM COMMA (,)
        0x00, 0x00, 0x00, 0x00,  # NUM3
        0x00, 0x00, 0x00, 0x00,  # NUM6
        0x00, 0x00, 0x00, 0x00,  # NUM9
        0x00, 0x00, 0x00, 0x00,  # NUM MULTIPLY (*)
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # NUM ENTER
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # NUM PLUS (+)
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # NUM MINUS (-)
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00,  # ???
        0x00, 0x00, 0x00, 0x00  # ???
    ])
    start_packet = [0x08, 0x01, 0x33, 0x01, 0x00, 0x06, 0x01, 0xbb]
    record_packet = [0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xe5]
    end_packet = [0x08, 0x02, 0x33, 0x01, 0x1a, 0x06, 0x01, 0xa0]
    data_arr = [packet1, packet2, packet3, packet4, packet5, packet6, packet7, packet8]
    send_control_transfer(dev, start_packet)
    send_control_transfer(dev, record_packet)
    for data in data_arr:
        try:
            dev.write(endpoint, data)
            print("Interrupt transfer sent successfully")
        except usb.core.USBError as e:
            print(f"Error sending interrupt transfer: {e}")
    send_control_transfer(dev, end_packet)


def calculate_checksum(packet):
    checksum = sum(packet) & 0xFF  # Sum of all bytes modulo 256
    checksum = ~checksum & 0xFF  # One's complement
    return checksum


def send_control_transfer(dev, data):
    # Send a USB control transfer to the device
    dev.ctrl_transfer(bmRequestType, bRequest, wValue, wIndex, data)


def main():
    preset = "aaaa"
    while preset != "y" and preset != "n":
        preset = input("Do you want to use the presets? (y/n): ")
        preset = preset.lower()
    preset_packet = [0x08, 0x02, 0x02, 0x05, 0x32, 0x05, 0x02, 0xb5]
    if preset == "y":
        preset_packet = get_preset_packet()
    # Find the USB device
    dev = usb.core.find(idVendor=VENDOR_ID, idProduct=PRODUCT_ID)

    if dev is None:
        raise ValueError('Device not found')
    i = 0
    try:
        while dev.is_kernel_driver_active(i):
            print(f"Detaching kernel driver {i}...")
            dev.detach_kernel_driver(i)
            i = i + 1
        print("Detached all kernel drivers")
        # Reset the device to ensure it's not busy
        print("Resetting the device...")
        #dev.reset()

        # Set the active configuration. This step is device-specific.
        print("Setting device configuration...")
        dev.set_configuration()
        # Send the USB control transfer
        print("Sending initialization packets...")
        for packet in INIT_PACKETS:
            if packet[0] == 0x08 and packet[1] == 0x02:
                packet[7] = calculate_checksum(packet)
            print(f"Sending packet: {packet}")
            send_control_transfer(dev, packet)
            time.sleep(0.1)

        if preset == "y":
            send_control_transfer(dev, preset_packet)
        else:
            send_custom_packets(dev, "TODO: add data here that got generated before keyboard gets disconnected")

        print("Control transfer sent successfully.")

    except usb.core.USBError as e:
        print(f"USB error: {e}")
    except Exception as e:
        print(f"Error: {e}")
    finally:
        # Reattach the kernel driver if it was detached
        for cnt in range(i):
            if not dev.is_kernel_driver_active(cnt):
                try:
                    print("Reattaching kernel driver...")
                    dev.attach_kernel_driver(cnt)
                except usb.core.USBError as e:
                    print(f"Could not reattach kernel driver: {e}")
        # Dispose of the USB resources
        usb.util.dispose_resources(dev)


if __name__ == "__main__":
    main()
